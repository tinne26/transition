package text

import "github.com/hajimehoshi/ebiten/v2"

import "github.com/tinne26/transition/src/utils"

func init() {
	for _, bitmap := range pkgBitmaps {
		bounds := bitmap.Bounds()
		if bounds.Dx() <= 0 || bounds.Dy() != 7 { panic(bounds) }
	}
}

const KeyO   = '\x01'
const KeyI   = '\x02'
const KeyJ   = '\x03'
const KeyK   = '\x04'
const KeyL   = '\x05'
const KeyA   = '\x06'
const KeyD   = '\x07'
const KeyTAB = '\x09'

const KeyMsgI = '\x10'

var pkgBitmaps = map[rune]*ebiten.Image{
	// --- special hacks ----
	KeyTAB: utils.RawAlphaMaskToWhiteMask(13, []byte{
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,
		1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,
		1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	}),
	KeyO: utils.RawAlphaMaskToWhiteMask(6, []byte{
		1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 1,
		1, 1, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1,
	}),
	KeyI: utils.RawAlphaMaskToWhiteMask(5, []byte{
		1, 1, 1, 1, 1,
		1, 0, 0, 0, 1,
		1, 1, 0, 1, 1,
		1, 1, 0, 1, 1,
		1, 1, 0, 1, 1,
		1, 0, 0, 0, 1,
		1, 1, 1, 1, 1,
	}),
	KeyK: utils.RawAlphaMaskToWhiteMask(6, []byte{
		1, 1, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 0, 1, 1,
		1, 0, 0, 1, 1, 1,
		1, 0, 1, 0, 1, 1,
		1, 0, 1, 1, 0, 1,
		1, 1, 1, 1, 1, 1,
	}),
	KeyL: utils.RawAlphaMaskToWhiteMask(5, []byte{
		1, 1, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 0, 1, 1, 1,
		1, 0, 0, 0, 1,
		1, 1, 1, 1, 1,
	}),
	KeyJ: utils.RawAlphaMaskToWhiteMask(6, []byte{
		1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1,
		1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1,
		1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1,
	}),
	KeyD: utils.RawAlphaMaskToWhiteMask(6, []byte{
		1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 1, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 1,
		1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1,
	}),
	KeyA: utils.RawAlphaMaskToWhiteMask(5, []byte{
		1, 1, 1, 1, 1,
		1, 0, 0, 0, 1,
		1, 0, 1, 0, 1,
		1, 0, 0, 0, 1,
		1, 0, 1, 0, 1,
		1, 0, 1, 0, 1,
		1, 1, 1, 1, 1,
	}),
	KeyMsgI: utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		0, 1, 0,
		0, 1, 0,
		0, 1, 0,
		1, 1, 1,
		0, 0, 0,
	}),

	// --- main alphabet ---
	'A': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 1,
		1, 1, 1,
		1, 0, 1,
		1, 0, 1,
		0, 0, 0,
	}),
	'B': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 0,
		1, 0, 1,
		1, 1, 0,
		1, 0, 1,
		1, 1, 0,
		0, 0, 0,
	}),
	'C': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 0, 0,
		1, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
	'D': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 0,
		1, 0, 1,
		1, 0, 1,
		1, 0, 1,
		1, 1, 0,
		0, 0, 0,
	}),
	'E': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 1, 0,
		1, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
	'F': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 0, 0,
		0, 0, 0,
	}),
	'G': utils.RawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 1,
		1, 0, 0, 0,
		1, 0, 1, 1,
		1, 0, 0, 1,
		1, 1, 1, 1,
		0, 0, 0, 0,
	}),
	'H': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 1,
		1, 0, 1,
		1, 1, 1,
		1, 0, 1,
		1, 0, 1,
		0, 0, 0,
	}),
	'I': utils.RawAlphaMaskToWhiteMask(1, []byte{
		0,
		1,
		1,
		1,
		1,
		1,
		0,
	}),
	'J': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		0, 0, 1,
		0, 0, 1,
		0, 0, 1,
		1, 0, 1,
		0, 1, 0,
		0, 0, 0,
	}),
	'K': utils.RawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 0, 0, 1,
		1, 0, 1, 0,
		1, 1, 0, 0,
		1, 0, 1, 0,
		1, 0, 0, 1,
		0, 0, 0, 0,
	}),
	'L': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 0,
		1, 0, 0,
		1, 0, 0,
		1, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
	'M': utils.RawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		1, 1, 0, 1, 1,
		1, 1, 0, 1, 1,
		1, 0, 1, 0, 1,
		1, 0, 1, 0, 1,
		1, 0, 0, 0, 1,
		0, 0, 0, 0, 0,
	}),
	'N': utils.RawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 0, 0, 1,
		1, 1, 0, 1,
		1, 1, 1, 1,
		1, 0, 1, 1,
		1, 0, 0, 1,
		0, 0, 0, 0,
	}),
	'O': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 1,
		1, 0, 1,
		1, 0, 1,
		1, 1, 1,
		0, 0, 0,
	}),
	'P': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 1,
		1, 1, 1,
		1, 0, 0,
		1, 0, 0,
		0, 0, 0,
	}),
	'Q': utils.RawAlphaMaskToWhiteMask(4, []byte{
		0, 0, 0, 0,
		1, 1, 1, 1,
		1, 0, 0, 1,
		1, 0, 0, 1,
		1, 0, 1, 1,
		1, 1, 1, 1,
		0, 0, 1, 0,
	}),
	'R': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 1,
		1, 1, 0,
		1, 0, 1,
		1, 0, 1,
		0, 0, 0,
	}),
	'S': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		1, 0, 0,
		1, 1, 1,
		0, 0, 1,
		1, 1, 1,
		0, 0, 0,
	}),
	'T': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		0, 1, 0,
		0, 1, 0,
		0, 1, 0,
		0, 1, 0,
		0, 0, 0,
	}),
	'U': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 1,
		1, 0, 1,
		1, 0, 1,
		1, 0, 1,
		1, 1, 1,
		0, 0, 0,
	}),
	'V': utils.RawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		1, 0, 0, 0, 1,
		1, 0, 0, 0, 1,
		0, 1, 0, 1, 0,
		0, 1, 0, 1, 0,
		0, 0, 1, 0, 0,
		0, 0, 0, 0, 0,
	}),
	'W': utils.RawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		1, 0, 0, 0, 1,
		1, 0, 0, 0, 1,
		1, 0, 1, 0, 1,
		0, 1, 0, 1, 0,
		0, 1, 0, 1, 0,
		0, 0, 0, 0, 0,
	}),
	'X': utils.RawAlphaMaskToWhiteMask(5, []byte{
		0, 0, 0, 0, 0,
		1, 0, 0, 0, 1,
		0, 1, 0, 1, 0,
		0, 0, 1, 0, 0,
		0, 1, 0, 1, 0,
		1, 0, 0, 0, 1,
		0, 0, 0, 0, 0,
	}),
	'Y': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 1,
		1, 0, 1,
		0, 1, 0,
		0, 1, 0,
		0, 1, 0,
		0, 0, 0,
	}),
	'Z': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 1,
		0, 0, 1,
		0, 1, 0,
		1, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
	// ---- symbols and punctuation ----
	// Note: space is special and only shifts the
	//       position 4 pixels forwards.
	'.': utils.RawAlphaMaskToWhiteMask(1, []byte{
		0,
		0,
		0,
		0,
		0,
		1,
		0,
	}),
	',': utils.RawAlphaMaskToWhiteMask(1, []byte{
		0,
		0,
		0,
		0,
		0,
		1,
		1,
	}),
	':': utils.RawAlphaMaskToWhiteMask(1, []byte{
		0,
		0,
		1,
		0,
		1,
		0,
		0,
	}),
	';': utils.RawAlphaMaskToWhiteMask(2, []byte{
		0, 0,
		0, 0,
		0, 1,
		0, 0,
		0, 1,
		0, 1,
		1, 0,
	}),
	'!': utils.RawAlphaMaskToWhiteMask(1, []byte{
		0,
		1,
		1,
		1,
		0,
		1,
		0,
	}),
	'?': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 1, 0,
		0, 0, 1,
		0, 1, 0,
		0, 0, 0,
		0, 1, 0,
		0, 0, 0,
	}),
	'\'': utils.RawAlphaMaskToWhiteMask(1, []byte{
		0,
		1,
		1,
		0,
		0,
		0,
		0,
	}),
	'(': utils.RawAlphaMaskToWhiteMask(2, []byte{
		0, 1,
		1, 0,
		1, 0,
		1, 0,
		1, 0,
		1, 0,
		0, 1,
	}),
	')': utils.RawAlphaMaskToWhiteMask(2, []byte{
		1, 0,
		0, 1,
		0, 1,
		0, 1,
		0, 1,
		0, 1,
		1, 0,
	}),
	'[': utils.RawAlphaMaskToWhiteMask(2, []byte{
		1, 1,
		1, 0,
		1, 0,
		1, 0,
		1, 0,
		1, 0,
		1, 1,
	}),
	']': utils.RawAlphaMaskToWhiteMask(2, []byte{
		1, 1,
		0, 1,
		0, 1,
		0, 1,
		0, 1,
		0, 1,
		1, 1,
	}),
	'"': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		1, 0, 1,
		1, 0, 1,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
	}),
	'_': utils.RawAlphaMaskToWhiteMask(3, []byte{
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
		1, 1, 1,
		0, 0, 0,
	}),
}
